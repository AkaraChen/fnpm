/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get registry metadata info */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Registry metadata info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RegistryMetadata'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get registry metadata info */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Registry metadata info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': Record<string, never>[];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['NpmError'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/{packageName}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description This endpoint responds with the package metadata document, sometimes informally called a "packument" or "doc.json". */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the package */
                    packageName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package Metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['PackageMetadata'];
                    };
                };
                /** @description Package not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['NpmError'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/{packageName}/{version}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description This endpoint responds with the package metadata document for a specific version. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the package */
                    packageName: string;
                    /** @description a version number or "latest" */
                    version: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package Metadata of a specific version */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['PackageVersionMetadata'];
                    };
                };
                /** @description Package not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['NpmError'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/v1/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description This endpoint responds with the search result.
         *     Special search qualifiers can be provided in the full-text query:
         *     - author:bcoe: Show/filter results in which bcoe is the author
         *     - maintainer:bcoe: Show/filter results in which bcoe is qualifier as a maintainer
         *     - keywords:batman: Show/filter results that have batman in the keywords
         *
         *       - separating multiple keywords with
         *
         *         - , acts like a logical OR
         *
         *         - + acts like a logical AND
         *
         *         - ,- can be used to exclude keywords
         *
         *     - not:unstable: Exclude packages whose version is < 1.0.0
         *     - not:insecure: Exclude packages that are insecure or have vulnerable dependencies (based on the nsp registry)
         *     - is:unstable: Show/filter packages whose version is < 1.0.0
         *     - is:insecure: Show/filter packages that are insecure or have vulnerable dependencies (based on the nsp registry)
         *     - boost-exact:false: Do not boost exact matches, defaults to true
         *     Note: the values of quality, popularity, and maintenance are normalized into a unit-vector provide values between 0 - 1 for each to modify weightings, e.g., to return results based solely on quality, set quality=1.0, maintenance=0.0, popularity=0.0. */
        get: {
            parameters: {
                query?: {
                    /** @description Full-text search to apply */
                    text?: string | null;
                    /** @description How many results should be returned (default 20, max 250) */
                    size?: number | null;
                    /** @description Offset to return results from */
                    from?: number | null;
                    /** @description How much of an effect should quality have on search results */
                    quality?: number | null;
                    /** @description How much of an effect should popularity have on search results */
                    popularity?: number | null;
                    /** @description How much of an effect should maintenance have on search results */
                    maintenance?: number | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package Metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['SearchResults'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/downloads/point/{period}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets the downloads per day for a given period for all packages. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    period: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Registry downloads metadata info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RegistryDownloads'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/downloads/point/{period}/{packageName}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets the downloads per day for a given period for a specific package. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    period: string;
                    packageName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package downloads metadata info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['PackageDownloads'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/downloads/range/{period}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets the downloads per day for a given period for all packages. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    period: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Registry downloads metadata info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['DailyRegistryDownloads'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/downloads/range/{period}/{packageName}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets the downloads per day for a given period for a specific package. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    period: string;
                    packageName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package downloads metadata info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['DailyPackageDownloads'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/versions/{packageName}/last-week': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Download count for specific versions of a package. It's only available for the previous 7 days.
         *     Note: for scoped packages, the `/` needs to be percent encoded. (`@slack/client` -> `@slack%2Fclient`). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    packageName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package download count for specific versions. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['PackageVersionsDownloadCount'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/user/org.couchdb.user:{user}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description User login endpoint */
        put: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path: {
                    user: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['LoginRequest'];
                };
            };
            responses: {
                /** @description Successful authentication with Bearer Token. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['LoginResponse'];
                    };
                };
                /** @description Authentication was unsuccessful. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['LegacyStatus'];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/npm/v1/user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User detail endpoint */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User detail. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Profile'];
                    };
                };
            };
        };
        put?: never;
        /** @description User login endpoint */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['ProfileUpdateRequest'];
                };
            };
            responses: {
                /** @description User profile updated with success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Profile'];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/npm/v1/tokens': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User's token list endpoint */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User's token list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['TokenPage'];
                    };
                };
            };
        };
        put?: never;
        /** @description Token create endpoint */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['TokenCreationRequest'];
                };
            };
            responses: {
                /** @description Token created with success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Token'];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/npm/v1/tokens/token/{uuid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Token delete endpoint */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path: {
                    /** @description Key (UUID) of the Token to delete */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token deleted with success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/user/token/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Token delete endpoint */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path: {
                    /** @description Token to delete */
                    token: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token deleted with success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['LegacyStatus'];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/npm/v1/hooks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Hook list endpoint. */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by package name; regexp patterns are not parsed. */
                    package?: string;
                    /** @description Return at most N hooks. */
                    limit?: number;
                    /** @description Start at the Nth hook (use with limit for pagination). */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Hook list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['HookSearchResults'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/npm/v1/hooks/hook': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Hook create endpoint. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['HookCreateRequest'];
                };
            };
            responses: {
                /** @description Hook created with success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Hook'];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/-/npm/v1/hooks/hook/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Hook endpoint. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Hook id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Hook found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Hook'];
                    };
                };
            };
        };
        /** @description Hook update endpoint */
        put: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path: {
                    /** @description Hook id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['HookUpdateRequest'];
                };
            };
            responses: {
                /** @description Hook updated with success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Hook'];
                    };
                };
            };
        };
        post?: never;
        /** @description Hook delete endpoint */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description One time password */
                    'npm-otp'?: string;
                };
                path: {
                    /** @description Hook id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Hook deleted with success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Hook'];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Generic NpmError */
        NpmError: {
            /** @description Error message */
            readonly error?: string;
            readonly code?: string;
            /** @description Error message */
            readonly message?: string;
            /** @description HTTP Status Code */
            readonly statusCode?: number;
        };
        /** @description Package download count for specific versions. */
        PackageVersionsDownloadCount: {
            /** @description Package name */
            readonly package: string;
            /** @description A map containing the package version as key and the download count as value. */
            downloads: {
                [key: string]: number;
            };
        };
        ProfileTfa: {
            readonly mode: string;
            readonly pending: boolean;
        };
        Profile: {
            /** @description User Two-Factor authentication settings */
            readonly tfa?: unknown;
            /** @description User name */
            readonly name: string;
            /** @description User email */
            readonly email: string;
            /** @description Email verification status */
            readonly email_verified: boolean;
            /**
             * Format: date-time
             * @description When the account was created
             */
            readonly created: string;
            /**
             * Format: date-time
             * @description When the account was updated
             */
            readonly updated?: string;
            /** @description CIDR whitelist */
            readonly cidr_whitelist?: string[];
            /** @description User full name */
            readonly fullname?: string;
            /**
             * Format: uri
             * @description User homepage url
             */
            readonly homepage?: string;
            readonly freenode?: string;
            /** @description Twitter username */
            readonly twitter?: string;
            /** @description GitHub username */
            readonly github?: string;
        };
        PasswordUpdateRequest: {
            old: string;
            new: string;
        };
        ProfileUpdateRequest: {
            /** @description User Two-Factor authentication settings */
            tfa?: unknown;
            /** @description Password change request data */
            password?: components['schemas']['PasswordUpdateRequest'];
            /** @description User email */
            email?: string;
            /** @description User full name */
            fullname?: string;
            /**
             * Format: uri
             * @description User homepage url
             */
            homepage?: string;
            freenode?: string;
            /** @description Twitter username */
            twitter?: string;
            /** @description GitHub username */
            github?: string;
        };
        /** @description Urls to navigate results */
        PageUrls: {
            /**
             * Format: uri
             * @description Url of the next results
             */
            readonly next?: string;
            /**
             * Format: uri
             * @description Url of the previous results
             */
            readonly prev?: string;
        };
        /** @description A container object for pages of lists. */
        Page: {
            /** @description Number of total items */
            readonly total?: number;
            readonly objects: {
                [key: string]: unknown;
            }[];
            /** @description Urls to navigate results */
            urls: components['schemas']['PageUrls'];
        };
        /** @description Objects containing the list of user's tokens */
        TokenPage: components['schemas']['Page'] & {
            userHasOldFormatToken: boolean;
        };
        Token: {
            /** @description \[REDACTED\] on subsequent display. The "Bearer" token. */
            readonly token: string;
            /** @description sha512 hash of the token UUID */
            readonly key: string;
            readonly automation: boolean;
            readonly cidr_whitelist?: string[];
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly updated: string;
            readonly readonly: boolean;
        };
        TokenCreationRequest: {
            /** @description NPM User password */
            password: string;
            readonly?: boolean;
            cidr_whitelist?: string[];
        };
        LegacyStatus: {
            /** @description If operation succeded. */
            readonly ok: boolean;
        };
        /**
         * @description Type of object being watched; `package`, `scope`, or `owner`.
         * @enum {string}
         */
        HookType: 'package' | 'scope' | 'owner';
        /** @description Hook creation request object */
        HookCreateRequest: {
            type: components['schemas']['HookType'];
            /** @description Name of package or organization/user scope to watch, e.g, `@scope` or `package`. */
            name: string;
            /**
             * Format: uri
             * @description Full uri of the endpoint to post the notification to.
             */
            endpoint: string;
            /** @description A secret shared between the registry & you; used to sign the payload. */
            secret: string;
        };
        /** @description Hook update request object */
        HookUpdateRequest: {
            /**
             * Format: uri
             * @description Full uri of the endpoint to post the notification to.
             */
            endpoint: string;
            /** @description A secret shared between the registry & you; used to sign the payload. */
            secret: string;
        };
        /** @description Hook object */
        Hook: {
            /** @description Hook id */
            readonly id: string;
            /** @description NPM user name. */
            readonly username: string;
            /** @description Name of package or organization/user scope to watch, e.g, `@scope` or `package`. */
            readonly name: string;
            /**
             * Format: uri
             * @description Full uri of the endpoint to post the notification to.
             */
            readonly endpoint: string;
            /** @description A secret shared between the registry & you; used to sign the payload. */
            readonly secret: string;
            readonly type: components['schemas']['HookType'];
            /**
             * Format: date-time
             * @description Hook creation date
             */
            readonly created: string;
            /**
             * Format: date-time
             * @description Hook update date
             */
            readonly updated: string;
            readonly delivered: boolean;
            /**
             * Format: date-time
             * @description Hook last delivery date
             */
            readonly last_delivery?: string;
            /** @description Response code */
            readonly response_code: number;
            /** @description Hook status */
            readonly status: string;
            /** @description If the Hook has been deleted */
            readonly deleted?: boolean;
        };
        /** @description It contains the results returned by the hook search. */
        HookSearchResults: {
            readonly objects: components['schemas']['Hook'][];
            /** @description Total number of search results corresponding to a query; may be higher than the number of `objects` */
            readonly total: number;
        };
        LoginRequest: {
            /** @description NPM username. */
            name: string;
            /** @description NPM user password. */
            password: string;
            readonly?: boolean;
            cidr_whitelist?: string[];
        };
        LoginResponse: {
            /** @description Bearer token */
            readonly token?: string;
            /** @description If login succeded */
            readonly ok?: boolean;
        };
        RegistryMetadataOther: {
            readonly data_size: number;
        };
        RegistryMetadataSizes: {
            readonly external: number;
            readonly file: number;
            readonly active: number;
        };
        /** @description Registry Metadata */
        RegistryMetadata: {
            readonly data_size: number;
            readonly doc_count: number;
            readonly other: components['schemas']['RegistryMetadataOther'];
            readonly update_seq: number;
            readonly disk_size: number;
            readonly disk_format_version: number;
            readonly doc_del_count: number;
            readonly uuid: string;
            readonly instance_start_time: string;
            readonly committed_update_seq: number;
            readonly compacted_seq: number;
            readonly db_name: string;
            readonly purge_seq: number;
            readonly sizes: components['schemas']['RegistryMetadataSizes'];
            readonly engine: string;
        };
        /**
         * @description Represents a person associated to a package. It has at least one of the following fields defined:
         *     - name: a freeform string name
         *     - email: an email address
         *     - url: a url for a web page with more information about the author
         *     Historically no validation has been performed on those fields; they are generated by parsing user-provided data in package.json at publication time.
         * @example {
         *       "email": "ben@example.com",
         *       "name": "Ben The Example"
         *     }
         */
        Person: {
            /** @description A freeform string name */
            readonly name?: string;
            /**
             * Format: email
             * @description An email address
             */
            readonly email?: string;
            /**
             * Format: uri
             * @description A url for a web page with more information about the author
             */
            readonly url?: string;
        };
        /**
         * @description The dist object is generated by npm and may be relied upon. Each dist object has at least two fields:
         *     - tarball: the url of the tarball containing the payload for this package
         *     - shasum: the SHA-1 sum of the tarball
         *     - integrity: since Apr 2017, string in the format `<hashAlgorithm>-<base64-hash>`, refer the Subresource Integrity and cacache package for more
         *     - fileCount: since Feb 2018, the number of files in the tarball, folder excluded
         *     - unpackedSize: since Feb 2018, the total byte of the unpacked files in the tarball
         *     - npm-signature: since Apr 2018, a PGP signature of `<package>@<version>:<integrity>`, refer the npm blog and doc for more (in the future) a SHA-2 512 sum of the tarball
         * @example {
         *       "shasum": "bbf102d5ae73afe2c553295e0fb02230216f65b1",
         *       "tarball": "https://registry.npmjs.org/tiny-tarball/-/tiny-tarball-1.0.0.tgz"
         *     }
         */
        DistInfo: {
            /**
             * Format: uri
             * @description The url of the tarball containing the payload for this package
             */
            readonly tarball: string;
            /** @description The SHA-1 sum of the tarball */
            readonly shasum: string;
            /** @description Since Apr 2017, string in the format `<hashAlgorithm>-<base64-hash>`, refer the Subresource Integrity and cacache package for more */
            readonly integrity?: string;
            /** @description Since Feb 2018, the number of files in the tarball, folder excluded */
            readonly fileCount?: number;
            /** @description Since Feb 2018, the total byte of the unpacked files in the tarball */
            readonly unpackedSize?: number;
            /** @description PGP signature of `<package>@<version>:<integrity>` */
            readonly 'npm-signature'?: string;
            readonly signatures?: {
                readonly keyid: string;
                readonly sig: string;
            }[];
        };
        /**
         * @description An object specifying the repository where the source for this package might be found.
         * @example {
         *       "type": "git",
         *       "url": "git://github.com/npm/npm.git"
         *     }
         */
        Repository: {
            /** @description Repository type (for example, `git`) */
            readonly type?: string;
            /**
             * Format: uri
             * @description Url of the repository
             */
            readonly url: string;
            /** @description Specific directory in the repository containing the package (for example, a directory in a monorepo) */
            readonly directory?: string;
        };
        /**
         * @description An object specifying the funding info for this package.
         * @example {
         *       "type": "individual",
         *       "url" : "http://example.com/donate"
         *     }
         */
        Funding: {
            /** @description Funding type */
            readonly type?: string;
            /**
             * Format: uri
             * @description Url of the funding
             */
            readonly url: string;
        };
        /** @description It represents the bug tracking methods. */
        BugTracker: {
            /**
             * Format: uri
             * @description The url of the project's issue tracker.
             */
            readonly url?: string;
            /**
             * Format: email
             * @description The email address to which issues should be reported.
             */
            readonly email?: string;
        };
        /** @description Base Package metadata object containing the basic package information. Extended By Version and PackageMetadata */
        BasicPackage: {
            /** @description The package name, used as an ID in CouchDB */
            readonly _id: string;
            /** @description The package name */
            readonly name: string;
            readonly author?: components['schemas']['Person'];
            /** @description Bug tracker */
            readonly bugs?: components['schemas']['BugTracker'];
            /** @description List of package contributors */
            readonly contributors?: components['schemas']['Person'][];
            /** @description A short description of the package */
            readonly description?: string;
            /**
             * Format: uri
             * @description The url of the project homepage.
             */
            readonly homepage?: string;
            /** @description Array of string keywords */
            readonly keywords?: string[];
            /** @description The SPDX identifier of the package's license */
            readonly license?: string;
            /** @description Array of person objects for people with permission to publish this package; not authoritative but informational */
            readonly maintainers?: components['schemas']['Person'][];
            /** @description The first 64K of the README data for the most-recently published version of the package */
            readonly readme?: string;
            /** @description The name of the file from which the readme data was taken. */
            readonly readmeFilename?: string;
            /** @description Repository containing the package's source */
            readonly repository?: components['schemas']['Repository'];
        } & {
            [key: string]: unknown;
        };
        /** @description Objects containing the information needed to install that version */
        PackageVersionMetadata: components['schemas']['BasicPackage'] & {
            /** @description The version string for this version */
            readonly version: string;
            /** @description The deprecation warnings message of this version */
            readonly deprecated?: string;
            /** @description A mapping of other packages this version depends on to the required semver ranges */
            readonly dependencies?: {
                [key: string]: string;
            };
            /** @description An object mapping package names to the required semver ranges of optional dependencies */
            readonly optionalDependencies?: {
                [key: string]: string;
            };
            /** @description A mapping of package names to the required semver ranges of development dependencies */
            readonly devDependencies?: {
                [key: string]: string;
            };
            /** @description An array of dependencies bundled with this version */
            readonly bundleDependencies?: string[];
            /** @description A mapping of package names to the required semver ranges of development dependencies */
            readonly peerDependencies?: {
                [key: string]: string;
            };
            /** @description A mapping of dependency package names to be replaced with another version, or another package entirely */
            readonly overrides?: {
                [key: string]: string;
            };
            /** @description A mapping of bin commands to set up for this version */
            readonly bin?: {
                [key: string]: string;
            };
            /** @description An array of directories included by this version */
            readonly directories?: string[];
            readonly dist: components['schemas']['DistInfo'];
            /** @example {
             *       "engines": {
             *         "node": ">=0.10.3 <15
             *         "npm": "~1.0.20"
             *       }
             *     } */
            readonly engines?: {
                /** @description The node engines required for this version to run, if specified */
                node?: string;
                /** @description The npm engines required for this version to run, if specified */
                npm?: string;
            } & {
                [key: string]: string;
            };
            /** @description `true` if this version is known to have a shrinkwrap that must be used to install it; false if this version is known not to have a shrinkwrap. If this field is `undefined`, the client must determine through other means if a shrinkwrap exists. */
            readonly _hasShrinkwrap?: boolean;
            /** @description The version of node used to publish the package */
            readonly _nodeVersion?: string;
            /** @description User who published this package version */
            readonly _npmUser: components['schemas']['Person'];
            /** @description The version of the npm client used to publish the package */
            readonly _npmVersion?: string;
            /** @description Commit hash corresponding to the published version */
            readonly gitHead?: string;
            /** @description The package's entry point (e.g., index.js or main.js) */
            readonly main?: string;
            /** @description The package's entry point (e.g., index.js or main.js) if the module is meant to be used client-side */
            readonly browser?: string;
            /** @description The "scripts" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point. */
            readonly scripts?: {
                [key: string]: string;
            };
            /** @description A "config" object can be used to set configuration parameters used in package scripts that persist across upgrades. */
            readonly config?: {
                [key: string]: string;
            };
            /** @description A set of config values that will be used at publish-time */
            readonly publishConfig?: {
                [key: string]: string;
            };
            funding?: components['schemas']['Funding'];
            /** @description An array of file patterns that describes the entries to be included when the package is installed as a dependency. */
            files?: string[];
            /**
             * @description An array of operating systems the package will run on
             * @example [
             *       "darwin",
             *       "linux"
             *     ]
             */
            readonly os?: string[];
            /**
             * @description If the package code only runs on certain cpu architectures
             * @example [
             *       "x64",
             *       "ia32"
             *     ]
             */
            readonly cpu?: string[];
            /** @description If the package is private or not */
            readonly private?: boolean;
            /** @description An array of file patterns that describes locations within the local file system that the install client should look up to find each workspace that needs to be symlinked to the top level node_modules folder. */
            readonly workspaces?: string[];
            /** @description Internal npm data */
            readonly _npmOperationalInternal?: components['schemas']['NpmOperationalInternal'];
        };
        /** @description Internal npm data */
        NpmOperationalInternal: {
            readonly host: string;
            readonly tmp: string;
        };
        /** @description A mapping of dist tags to the versions they point to. */
        DistTags: {
            /** @description Latest version number */
            readonly latest: string;
        } & {
            [key: string]: string;
        };
        /** @description Package metadata describes a package for its consumers: who wrote it, where its repository is, and what versions of it have been published. It also contains a description of each version of a package present in the registry, listing its dependencies, giving the url of its tarball, and so on. Package metadata is useful for finding packages and for installing them. */
        PackageMetadata: components['schemas']['BasicPackage'] & {
            /** @description The revision number of this version of the document in CouchDB. */
            readonly _rev: string;
            /**
             * Format: date-time
             * @description ISO string of the last time this package was modified.
             */
            readonly modified: string;
            /** @description Final and detailed search score values */
            readonly 'dist-tags': components['schemas']['DistTags'];
            /** @description A mapping of version numbers to objects containing the information needed to install that version. */
            readonly versions: {
                [key: string]: components['schemas']['PackageVersionMetadata'];
            };
            /** @description Mapping of version numbers to publishing timestamps */
            readonly time: components['schemas']['VersionsToTimestamps'];
            /** @description An object whose keys are the npm user names of people who have starred the package. */
            readonly users?: {
                [key: string]: boolean;
            };
        };
        /** @description An object mapping versions to the time published, along with created and modified timestamps. */
        VersionsToTimestamps: {
            /**
             * Format: date-time
             * @description ISO string of when the package was created.
             */
            readonly created: string;
            /**
             * Format: date-time
             * @description ISO string of the last time this package was modified.
             */
            readonly modified: string;
        } & {
            [key: string]: string;
        };
        /** @description It contains the results returned by the registry for a query. */
        SearchResults: {
            readonly objects: components['schemas']['SearchResult'][];
            /** @description Total number of search results corresponding to a query; may be higher than the number of `objects` */
            readonly total: number;
            /** @description Date at which the search happened */
            readonly time: string;
        };
        /** @description It contains the search result for a single package and its search score. */
        SearchResult: {
            /** @description Abbreviated package metadata */
            readonly package: components['schemas']['PackageSearchResult'];
            /** @description Final and detailed search score values */
            readonly score?: components['schemas']['SearchScore'];
            /** @description Search score value; may be different from `score.final` */
            readonly searchScore: number;
            /** @description Flag attributes for the package */
            readonly flags?: components['schemas']['PackageFlags'];
        };
        /** @description It contains abbreviated package metadata returned by searching the registry for packages. */
        PackageSearchResult: {
            /** @description The package name */
            readonly name: string;
            /** @description Latest package version number */
            readonly version: string;
            /** @description The scope of the package */
            readonly scope?: string;
            /** @description A short description of the package */
            readonly description?: string;
            /** @description Array of string keywords */
            readonly keywords?: string[];
            /**
             * Format: date-time
             * @description Publishing timestamp for the latest version
             */
            readonly date: string;
            /** @description Links for pages associated to the package */
            readonly links: components['schemas']['PackageLinks'];
            /** @description The package publisher */
            readonly publisher: components['schemas']['Person'];
            /** @description The package author */
            readonly author?: components['schemas']['Person'];
            /** @description Array of person objects for people with permission to publish this package; not authoritative but informational */
            maintainers?: components['schemas']['Person'][];
        };
        /** @description It contains a collection of links of pages associated to the package. */
        PackageLinks: {
            /**
             * Format: uri
             * @description The NPM url of the package
             */
            readonly npm?: string;
            /**
             * Format: uri
             * @description The url of the project homepage.
             */
            readonly homepage?: string;
            /**
             * Format: uri
             * @description The url of the project repository.
             */
            readonly repository?: string;
            /**
             * Format: uri
             * @description The url of the project's issue tracker and / or the email address to which issues should be reported.
             */
            readonly bugs?: string;
        } & {
            [key: string]: string;
        };
        /** @description It contains the final and detailed search score values. */
        SearchScore: {
            /** @description Final search score value, computed from the detailed scores */
            readonly final: number;
            /** @description Detailed search score values */
            readonly detail: components['schemas']['SearchScoreDetail'];
        };
        /** @description It contains the search score values for the quality, popularity and maintenance categories. */
        SearchScoreDetail: {
            /** @description Package quality score value */
            readonly quality: number;
            /** @description Package popularity score value */
            readonly popularity: number;
            /** @description Package maintenance score value */
            readonly maintenance: number;
        };
        /** @description It contains flag attributes categorizing the package. */
        PackageFlags: {
            /** @description If true, package version is `<1.0.0` */
            readonly unstable?: boolean;
            /** @description If true, package is insecure or has vulnerable dependencies */
            readonly insecure?: boolean;
        };
        /** @description Lists the number of downloads for the registry in a given time period. */
        RegistryDownloads: {
            /** @description Total number of downloads */
            readonly downloads: number;
            /**
             * Format: date
             * @description Date of the first day (inclusive)
             */
            readonly start: string;
            /**
             * Format: date
             * @description Date of the last day (inclusive)
             */
            readonly end: string;
        };
        /** @description Lists the number of downloads for a package in a given time period. */
        PackageDownloads: components['schemas']['RegistryDownloads'] & {
            /** @description Package name */
            readonly package: string;
        };
        /** @description Lists the number of downloads in a given day. */
        DownloadsPerDay: {
            readonly downloads: number;
            /** Format: date */
            readonly day: string;
        };
        /** @description Lists the number of downloads for a package for each day in a given time period. */
        DailyRegistryDownloads: {
            /** @description Download counts per day */
            readonly downloads: components['schemas']['DownloadsPerDay'][];
            /**
             * Format: date
             * @description Date of the first day (inclusive)
             */
            readonly start: string;
            /**
             * Format: date
             * @description Date of the last day (inclusive)
             */
            readonly end: string;
        };
        /** @description Lists the number of downloads for a package for each day in a given time period. */
        DailyPackageDownloads: components['schemas']['DailyRegistryDownloads'] & {
            /** @description Package name */
            readonly package: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
